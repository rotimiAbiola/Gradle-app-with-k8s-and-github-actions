# This is a basic workflow to help you get started with Actions

name: CI Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", feature/branch ]
  # pull_request:
  #   branches: [ "main" ]
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Run a new script
        run: ls -la

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
        # app client Id must have contributor role

      - uses: azure/aks-set-context@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
          cluster-name: github-actions-cluster
          resource-group: AltSchool

      - run: |
            kubectl create namespace githubac

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: check java version
        run: java -version 
      - name: build with gradle
        run: gradle build
      - name: build with gradlew
        run: ./gradlew build
      - name: docker version
        run: |
          docker -v
          docker
      - name: docker build
        run: |
          docker build . -t rtmabiola/demo-kotlin1.0
          docker images -a
      - name: docker login
        run: echo ${{ secrets.dockerpasswd }} | docker login -u ${{ secrets.dockeruser }} --password-stdin
      - name: docker image push
        run: docker push rtmabiola/demo-kotlin1.0
